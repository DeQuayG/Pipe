# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the main branch.


name: Deploy to Amazon ECS

on:
  push:
    branches:
      - TestBranch     

env:
  AWS_REGION: us-east-1                   
  ECR_REPOSITORY: ${{ secrets.ECR_REPO }}           
  ECS_SERVICE: AnimeList_task_definition                
  ECS_CLUSTER: webscraper                 
  ECS_TASK_DEFINITION: BSoup                                   
  CONTAINER_NAME: b_soup

jobs:
  Build:
    name: Build and Package Artifact
    runs-on: ubuntu-20.04
    container: "python:3.9.0"
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2 #copies code from the repo into this hosted run 
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Setup AWS SAM CLI
  # You may pin to the exact commit or the version.
  # uses: aws-actions/setup-sam@0578b2f57e540e67233c3ce0c5477ee36938ff3d
      uses: aws-actions/setup-sam@v1
      with:
        # The AWS SAM CLI version to install
        version: latest
        # The Python interpreter to use for AWS SAM CLI
        python: 3.9.0


    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: us-east-1

    - name: Amazon ECR "Login" Action for GitHub Actions
  # You may pin to the exact commit or the version.
  # uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registries: ${{ secrets.ECR_REPO }}

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        dockerfile: DeQuayG/Pipe/tree/main/Docker 
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: latest  ## Modified the image tag to fit what the ECS Service is aready pointing to
      run: |
        docker build . --file DockerConf.dockerfile --tag ${{ secrets.ECR_REPO }} .
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/big_project_repo:latest
        echo "::set-output name=image::${{ secrets.ECR_REPO }}"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
